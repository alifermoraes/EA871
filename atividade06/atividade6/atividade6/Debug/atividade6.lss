
atividade6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00000118  0000018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000118  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000087f  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000076c  00000000  00000000  00000af7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000373  00000000  00000000  00001263  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  000015d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000400  00000000  00000000  00001630  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000bc  00000000  00000000  00001a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001aec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e1       	ldi	r30, 0x18	; 24
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 33       	cpi	r26, 0x32	; 50
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 8a 00 	jmp	0x114	; 0x114 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
uint8_t success[] = "Mensagem transmitida com sucesso!\n";

int main(void) {
    int i;

    USART_Init(MYUBRR);
  96:	89 e1       	ldi	r24, 0x19	; 25
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 77 00 	call	0xee	; 0xee <USART_Init>

    while (TRUE) {
        for (i = 0; message[i]; i++) {
  9e:	0f 2e       	mov	r0, r31
  a0:	f3 e2       	ldi	r31, 0x23	; 35
  a2:	ef 2e       	mov	r14, r31
  a4:	f1 e0       	ldi	r31, 0x01	; 1
  a6:	ff 2e       	mov	r15, r31
  a8:	f0 2d       	mov	r31, r0
            USART_Transmit(message[i]);
        }

        for (i = 0; success[i]; i++) {
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	11 e0       	ldi	r17, 0x01	; 1
    int i;

    USART_Init(MYUBRR);

    while (TRUE) {
        for (i = 0; message[i]; i++) {
  ae:	f7 01       	movw	r30, r14
  b0:	80 81       	ld	r24, Z
  b2:	88 23       	and	r24, r24
  b4:	39 f0       	breq	.+14     	; 0xc4 <main+0x2e>
  b6:	c4 e2       	ldi	r28, 0x24	; 36
  b8:	d1 e0       	ldi	r29, 0x01	; 1
            USART_Transmit(message[i]);
  ba:	0e 94 82 00 	call	0x104	; 0x104 <USART_Transmit>
    int i;

    USART_Init(MYUBRR);

    while (TRUE) {
        for (i = 0; message[i]; i++) {
  be:	89 91       	ld	r24, Y+
  c0:	81 11       	cpse	r24, r1
  c2:	fb cf       	rjmp	.-10     	; 0xba <main+0x24>
            USART_Transmit(message[i]);
        }

        for (i = 0; success[i]; i++) {
  c4:	f8 01       	movw	r30, r16
  c6:	80 81       	ld	r24, Z
  c8:	88 23       	and	r24, r24
  ca:	39 f0       	breq	.+14     	; 0xda <main+0x44>
  cc:	c1 e0       	ldi	r28, 0x01	; 1
  ce:	d1 e0       	ldi	r29, 0x01	; 1
            USART_Transmit(success[i]);
  d0:	0e 94 82 00 	call	0x104	; 0x104 <USART_Transmit>
    while (TRUE) {
        for (i = 0; message[i]; i++) {
            USART_Transmit(message[i]);
        }

        for (i = 0; success[i]; i++) {
  d4:	89 91       	ld	r24, Y+
  d6:	81 11       	cpse	r24, r1
  d8:	fb cf       	rjmp	.-10     	; 0xd0 <main+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	ff ef       	ldi	r31, 0xFF	; 255
  dc:	23 e2       	ldi	r18, 0x23	; 35
  de:	84 ef       	ldi	r24, 0xF4	; 244
  e0:	f1 50       	subi	r31, 0x01	; 1
  e2:	20 40       	sbci	r18, 0x00	; 0
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x4a>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x54>
  ea:	00 00       	nop
  ec:	e0 cf       	rjmp	.-64     	; 0xae <main+0x18>

000000ee <USART_Init>:

#include "usart.h"

void USART_Init(uint16_t ubrr) {
   /* Configura o BAUD */
   UBRR0H = (uint8_t) ((ubrr >> 8) & 0xF);
  ee:	9f 70       	andi	r25, 0x0F	; 15
  f0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
   UBRR0L = (uint8_t) (ubrr & 0xFF);
  f4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
   
   /* Habilita Tx */
   UCSR0B |= 0x08;
  f8:	e1 ec       	ldi	r30, 0xC1	; 193
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	88 60       	ori	r24, 0x08	; 8
 100:	80 83       	st	Z, r24
 102:	08 95       	ret

00000104 <USART_Transmit>:
   // UCSR0C = (1<<USBS0)|(3<<UCSZ00);
}

void USART_Transmit(uint8_t data) {
   /* Espera o buffer ficar vazio */
   while (!(UCSR0A & 0x20));
 104:	e0 ec       	ldi	r30, 0xC0	; 192
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	90 81       	ld	r25, Z
 10a:	95 ff       	sbrs	r25, 5
 10c:	fd cf       	rjmp	.-6      	; 0x108 <USART_Transmit+0x4>

   /* Coloca o dado no buffer e o envia */
   UDR0 = data;
 10e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 112:	08 95       	ret

00000114 <_exit>:
 114:	f8 94       	cli

00000116 <__stop_program>:
 116:	ff cf       	rjmp	.-2      	; 0x116 <__stop_program>
