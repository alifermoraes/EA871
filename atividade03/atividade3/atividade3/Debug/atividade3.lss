
atividade3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000226  000002ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000226  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010c  0080010c  000002c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000897  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000071d  00000000  00000000  00000c0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d9  00000000  00000000  0000132c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001708  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f2  00000000  00000000  00001750  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000006c  00000000  00000000  00001b42  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001bae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	69 00       	.word	0x0069	; ????
  6a:	6c 00       	.word	0x006c	; ????
  6c:	6f 00       	.word	0x006f	; ????
  6e:	72 00       	.word	0x0072	; ????
  70:	75 00       	.word	0x0075	; ????
  72:	78 00       	.word	0x0078	; ????
  74:	7b 00       	.word	0x007b	; ????
  76:	7e 00       	.word	0x007e	; ????
  78:	81 00       	.word	0x0081	; ????
  7a:	84 00       	.word	0x0084	; ????

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e6 e2       	ldi	r30, 0x26	; 38
  90:	f2 e0       	ldi	r31, 0x02	; 2
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	ac 30       	cpi	r26, 0x0C	; 12
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	ac e0       	ldi	r26, 0x0C	; 12
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	ae 30       	cpi	r26, 0x0E	; 14
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 8a 00 	call	0x114	; 0x114 <main>
  b2:	0c 94 11 01 	jmp	0x222	; 0x222 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <display_digit>:
 * Parametros:
 * - digit: digito que sera exibido no display.
 * - port: ponteiro para o endereco do port onde os segmentos do display estao
 * conectados
 */
void display_digit(int digit, uint8_ptr port) {
  ba:	fc 01       	movw	r30, r24
  bc:	db 01       	movw	r26, r22
	*port &= 0x01; /* Apaga todos os segmentos do display */
  be:	9c 91       	ld	r25, X
  c0:	91 70       	andi	r25, 0x01	; 1
  c2:	9c 93       	st	X, r25
	
	switch (digit) {
  c4:	ea 30       	cpi	r30, 0x0A	; 10
  c6:	f1 05       	cpc	r31, r1
  c8:	10 f5       	brcc	.+68     	; 0x10e <display_digit+0x54>
  ca:	ec 5c       	subi	r30, 0xCC	; 204
  cc:	ff 4f       	sbci	r31, 0xFF	; 255
  ce:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__tablejump2__>
    case 0:
        *port |= ZERO; /* Seta os bits dos segmentos do digito 0 */
  d2:	9e 67       	ori	r25, 0x7E	; 126
  d4:	9c 93       	st	X, r25
        break;
  d6:	08 95       	ret
    case 1:
        *port |= ONE; /* Seta os bits dos segmentos do digito 1 */
  d8:	9c 60       	ori	r25, 0x0C	; 12
  da:	9c 93       	st	X, r25
        break;
  dc:	08 95       	ret
    case 2:
        *port |= TWO; /* Seta os bits dos segmentos do digito 2 */
  de:	96 6b       	ori	r25, 0xB6	; 182
  e0:	9c 93       	st	X, r25
        break;
  e2:	08 95       	ret
    case 3:
        *port |= THREE; /* Seta os bits dos segmentos do digito 3 */
  e4:	9e 69       	ori	r25, 0x9E	; 158
  e6:	9c 93       	st	X, r25
        break;
  e8:	08 95       	ret
    case 4:
        *port |= FOUR; /* Seta os bits dos segmentos do digito 4 */
  ea:	9c 6c       	ori	r25, 0xCC	; 204
  ec:	9c 93       	st	X, r25
        break;
  ee:	08 95       	ret
    case 5:
        *port |= FIVE; /* Seta os bits dos segmentos do digito 5 */
  f0:	9a 6d       	ori	r25, 0xDA	; 218
  f2:	9c 93       	st	X, r25
        break;
  f4:	08 95       	ret
    case 6:
        *port |= SIX; /* Seta os bits dos segmentos do digito 6 */
  f6:	9a 6f       	ori	r25, 0xFA	; 250
  f8:	9c 93       	st	X, r25
        break;
  fa:	08 95       	ret
    case 7:
        *port |= SEVEN; /* Seta os bits dos segmentos do digito 7 */
  fc:	9e 60       	ori	r25, 0x0E	; 14
  fe:	9c 93       	st	X, r25
        break;
 100:	08 95       	ret
    case 8:
        *port |= EIGHT; /* Seta os bits dos segmentos do digito 8 */
 102:	9e 6f       	ori	r25, 0xFE	; 254
 104:	9c 93       	st	X, r25
        break;
 106:	08 95       	ret
    case 9:
        *port |= NINE; /* Seta os bits dos segmentos do digito 9 */
 108:	9e 6d       	ori	r25, 0xDE	; 222
 10a:	9c 93       	st	X, r25
        break;
 10c:	08 95       	ret
    default:
        *port |= ZERO; /* Seta os bits dos segmentos do digito 0 */
 10e:	9e 67       	ori	r25, 0x7E	; 126
 110:	9c 93       	st	X, r25
 112:	08 95       	ret

00000114 <main>:
		actual_state = 0x00,
		previous_state;

int main(void)
{
	*ucsr0b &= 0xF7; /* Desabilita a funcao UART do pino 1 do port D (TX) */
 114:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <ucsr0b>
 118:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <ucsr0b+0x1>
 11c:	80 81       	ld	r24, Z
 11e:	87 7f       	andi	r24, 0xF7	; 247
 120:	80 83       	st	Z, r24
    *ddrd |= 0xFE; /* Seta os pinos 1-7 do portd como saidas */
 122:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <ddrd>
 126:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <ddrd+0x1>
 12a:	80 81       	ld	r24, Z
 12c:	8e 6f       	ori	r24, 0xFE	; 254
 12e:	80 83       	st	Z, r24
    *ddrc &= 0xFE; /* Seta o pino 0 do portc como entrada */
 130:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <ddrc>
 134:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <ddrc+0x1>
 138:	80 81       	ld	r24, Z
 13a:	8e 7f       	andi	r24, 0xFE	; 254
 13c:	80 83       	st	Z, r24

    /* Inicia o display exibindo o valor zero */
    *portd &= 0x01; /* Apaga os segmentos do display */
 13e:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <portd>
 142:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <portd+0x1>
 146:	80 81       	ld	r24, Z
 148:	81 70       	andi	r24, 0x01	; 1
 14a:	80 83       	st	Z, r24
    *portd |= ZERO; /* Seta os bits dos segmentos referentes ao digito 0 */
 14c:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <portd>
 150:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <portd+0x1>
 154:	80 81       	ld	r24, Z
 156:	8e 67       	ori	r24, 0x7E	; 126
 158:	80 83       	st	Z, r24
	
	int counter = 0;
 15a:	c0 e0       	ldi	r28, 0x00	; 0
 15c:	d0 e0       	ldi	r29, 0x00	; 0
		    actual_state = *pinc & pin_c0_mask;

			/* Se o botao foi realmente pressionado, incrementa a contagem */
		    if (!actual_state) {
			    counter++;
			    display_digit((counter % 10), portd);
 15e:	0a e0       	ldi	r16, 0x0A	; 10
 160:	10 e0       	ldi	r17, 0x00	; 0
	int counter = 0;

    while (TRUE)
    {
	    previous_state = actual_state;
	    actual_state = *pinc & pin_c0_mask; /* estado atual do PINC */
 162:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <pinc>
 166:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <pinc+0x1>
 16a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
	
	int counter = 0;

    while (TRUE)
    {
	    previous_state = actual_state;
 16e:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_end>
 172:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <previous_state>
	    actual_state = *pinc & pin_c0_mask; /* estado atual do PINC */
 176:	80 81       	ld	r24, Z
 178:	82 23       	and	r24, r18
 17a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
		
		/**
		 * Se o estado anterior for diferente do estado atual, quer dizer que
		 * o botao foi pressionado
		 */
	    if (actual_state != previous_state) {
 17e:	98 17       	cp	r25, r24
 180:	b1 f3       	breq	.-20     	; 0x16e <main+0x5a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	2f ef       	ldi	r18, 0xFF	; 255
 184:	80 e7       	ldi	r24, 0x70	; 112
 186:	92 e0       	ldi	r25, 0x02	; 2
 188:	21 50       	subi	r18, 0x01	; 1
 18a:	80 40       	sbci	r24, 0x00	; 0
 18c:	90 40       	sbci	r25, 0x00	; 0
 18e:	e1 f7       	brne	.-8      	; 0x188 <main+0x74>
 190:	00 c0       	rjmp	.+0      	; 0x192 <main+0x7e>
 192:	00 00       	nop
		    /* Debouncing */
			_delay_ms(50);
		    actual_state = *pinc & pin_c0_mask;
 194:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <pinc>
 198:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <pinc+0x1>
 19c:	90 81       	ld	r25, Z
 19e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1a2:	89 23       	and	r24, r25
 1a4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>

			/* Se o botao foi realmente pressionado, incrementa a contagem */
		    if (!actual_state) {
 1a8:	81 11       	cpse	r24, r1
 1aa:	db cf       	rjmp	.-74     	; 0x162 <main+0x4e>
			    counter++;
 1ac:	21 96       	adiw	r28, 0x01	; 1
			    display_digit((counter % 10), portd);
 1ae:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <portd>
 1b2:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <portd+0x1>
 1b6:	ce 01       	movw	r24, r28
 1b8:	b8 01       	movw	r22, r16
 1ba:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <__divmodhi4>
 1be:	b9 01       	movw	r22, r18
 1c0:	0e 94 5d 00 	call	0xba	; 0xba <display_digit>
 1c4:	ce cf       	rjmp	.-100    	; 0x162 <main+0x4e>

000001c6 <__divmodhi4>:
 1c6:	97 fb       	bst	r25, 7
 1c8:	07 2e       	mov	r0, r23
 1ca:	16 f4       	brtc	.+4      	; 0x1d0 <__divmodhi4+0xa>
 1cc:	00 94       	com	r0
 1ce:	07 d0       	rcall	.+14     	; 0x1de <__divmodhi4_neg1>
 1d0:	77 fd       	sbrc	r23, 7
 1d2:	09 d0       	rcall	.+18     	; 0x1e6 <__divmodhi4_neg2>
 1d4:	0e 94 fd 00 	call	0x1fa	; 0x1fa <__udivmodhi4>
 1d8:	07 fc       	sbrc	r0, 7
 1da:	05 d0       	rcall	.+10     	; 0x1e6 <__divmodhi4_neg2>
 1dc:	3e f4       	brtc	.+14     	; 0x1ec <__divmodhi4_exit>

000001de <__divmodhi4_neg1>:
 1de:	90 95       	com	r25
 1e0:	81 95       	neg	r24
 1e2:	9f 4f       	sbci	r25, 0xFF	; 255
 1e4:	08 95       	ret

000001e6 <__divmodhi4_neg2>:
 1e6:	70 95       	com	r23
 1e8:	61 95       	neg	r22
 1ea:	7f 4f       	sbci	r23, 0xFF	; 255

000001ec <__divmodhi4_exit>:
 1ec:	08 95       	ret

000001ee <__tablejump2__>:
 1ee:	ee 0f       	add	r30, r30
 1f0:	ff 1f       	adc	r31, r31
 1f2:	05 90       	lpm	r0, Z+
 1f4:	f4 91       	lpm	r31, Z
 1f6:	e0 2d       	mov	r30, r0
 1f8:	09 94       	ijmp

000001fa <__udivmodhi4>:
 1fa:	aa 1b       	sub	r26, r26
 1fc:	bb 1b       	sub	r27, r27
 1fe:	51 e1       	ldi	r21, 0x11	; 17
 200:	07 c0       	rjmp	.+14     	; 0x210 <__udivmodhi4_ep>

00000202 <__udivmodhi4_loop>:
 202:	aa 1f       	adc	r26, r26
 204:	bb 1f       	adc	r27, r27
 206:	a6 17       	cp	r26, r22
 208:	b7 07       	cpc	r27, r23
 20a:	10 f0       	brcs	.+4      	; 0x210 <__udivmodhi4_ep>
 20c:	a6 1b       	sub	r26, r22
 20e:	b7 0b       	sbc	r27, r23

00000210 <__udivmodhi4_ep>:
 210:	88 1f       	adc	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	5a 95       	dec	r21
 216:	a9 f7       	brne	.-22     	; 0x202 <__udivmodhi4_loop>
 218:	80 95       	com	r24
 21a:	90 95       	com	r25
 21c:	bc 01       	movw	r22, r24
 21e:	cd 01       	movw	r24, r26
 220:	08 95       	ret

00000222 <_exit>:
 222:	f8 94       	cli

00000224 <__stop_program>:
 224:	ff cf       	rjmp	.-2      	; 0x224 <__stop_program>
