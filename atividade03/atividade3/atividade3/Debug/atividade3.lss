
atividade3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000002b0  00000344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080010a  0080010a  0000034e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000034e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000878  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000720  00000000  00000000  00000c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e5  00000000  00000000  00001398  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001780  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042d  00000000  00000000  000017c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d4  00000000  00000000  00001bf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001cc9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	a6 00       	.word	0x00a6	; ????
  6a:	b3 00       	.word	0x00b3	; ????
  6c:	c0 00       	.word	0x00c0	; ????
  6e:	cd 00       	.word	0x00cd	; ????
  70:	da 00       	.word	0x00da	; ????
  72:	e7 00       	.word	0x00e7	; ????
  74:	f4 00       	.word	0x00f4	; ????
  76:	01 01       	movw	r0, r2
  78:	0e 01       	movw	r0, r28
  7a:	1b 01       	movw	r2, r22

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e0 eb       	ldi	r30, 0xB0	; 176
  90:	f2 e0       	ldi	r31, 0x02	; 2
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	aa 30       	cpi	r26, 0x0A	; 10
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	aa e0       	ldi	r26, 0x0A	; 10
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	ae 30       	cpi	r26, 0x0E	; 14
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  b2:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <is_button_pressed>:

#include <util/delay.h>
#include <stdint.h>
#include "button.h"

int is_button_pressed(uint8_ptr pin_button, uint8_t MASK) {
  ba:	fc 01       	movw	r30, r24
	uint8_t actual_state = 0x00,
			previous_state;

	while (TRUE) {
		previous_state = actual_state;
		actual_state = *pin_button & MASK;
  bc:	90 81       	ld	r25, Z
  be:	96 23       	and	r25, r22

		if (actual_state != previous_state) {
  c0:	99 23       	and	r25, r25
  c2:	f1 f3       	breq	.-4      	; 0xc0 <is_button_pressed+0x6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	81 ee       	ldi	r24, 0xE1	; 225
  c8:	94 e0       	ldi	r25, 0x04	; 4
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <is_button_pressed+0x10>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <is_button_pressed+0x1a>
  d4:	00 00       	nop
  d6:	80 81       	ld	r24, Z
  d8:	68 23       	and	r22, r24
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	11 f0       	breq	.+4      	; 0xe4 <is_button_pressed+0x2a>
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	90 e0       	ldi	r25, 0x00	; 0
			} else {
				return 0;
			}
		}
	}
} 
  e4:	08 95       	ret

000000e6 <main>:
int counter = 0,
    digit;

int main(void)
{
    *ddrd |= 0xFE; /* Seta os pinos 1-7 do portd como saidas */
  e6:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <ddrd>
  ea:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <ddrd+0x1>
  ee:	80 81       	ld	r24, Z
  f0:	8e 6f       	ori	r24, 0xFE	; 254
  f2:	80 83       	st	Z, r24
    *ddrc &= 0xFE ; /* Seta o pino 0 do portc como entrada */
  f4:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <ddrc>
  f8:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <ddrc+0x1>
  fc:	80 81       	ld	r24, Z
  fe:	8e 7f       	andi	r24, 0xFE	; 254
 100:	80 83       	st	Z, r24

    while (TRUE)
    {
        if (is_button_pressed(pinc, pin_c0_mask)) {
            counter++;
            digit = counter % 10;
 102:	ca e0       	ldi	r28, 0x0A	; 10
 104:	d0 e0       	ldi	r29, 0x00	; 0
    *ddrd |= 0xFE; /* Seta os pinos 1-7 do portd como saidas */
    *ddrc &= 0xFE ; /* Seta o pino 0 do portc como entrada */

    while (TRUE)
    {
        if (is_button_pressed(pinc, pin_c0_mask)) {
 106:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 10a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <pinc>
 10e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <pinc+0x1>
 112:	0e 94 5d 00 	call	0xba	; 0xba <is_button_pressed>
 116:	89 2b       	or	r24, r25
 118:	b1 f3       	breq	.-20     	; 0x106 <main+0x20>
            counter++;
 11a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 11e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 128:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
            digit = counter % 10;
 12c:	be 01       	movw	r22, r28
 12e:	0e 94 28 01 	call	0x250	; 0x250 <__divmodhi4>
 132:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <digit>
 136:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <digit+0x1>

            switch (digit)
 13a:	e8 2f       	mov	r30, r24
 13c:	f9 2f       	mov	r31, r25
 13e:	ea 30       	cpi	r30, 0x0A	; 10
 140:	f1 05       	cpc	r31, r1
 142:	08 f7       	brcc	.-62     	; 0x106 <main+0x20>
 144:	ec 5c       	subi	r30, 0xCC	; 204
 146:	ff 4f       	sbci	r31, 0xFF	; 255
 148:	0c 94 3c 01 	jmp	0x278	; 0x278 <__tablejump2__>
            {
            case 0:
                *portd &= 0x00;
 14c:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <portd>
 150:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <portd+0x1>
 154:	10 82       	st	Z, r1
                *portd |= ZERO;
 156:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <portd>
 15a:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <portd+0x1>
 15e:	80 81       	ld	r24, Z
 160:	8e 67       	ori	r24, 0x7E	; 126
 162:	80 83       	st	Z, r24
                break;
 164:	d0 cf       	rjmp	.-96     	; 0x106 <main+0x20>
            case 1:
                *portd &= 0x00;
 166:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <portd>
 16a:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <portd+0x1>
 16e:	10 82       	st	Z, r1
                *portd |= ONE;
 170:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <portd>
 174:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <portd+0x1>
 178:	80 81       	ld	r24, Z
 17a:	8c 60       	ori	r24, 0x0C	; 12
 17c:	80 83       	st	Z, r24
                break;
 17e:	c3 cf       	rjmp	.-122    	; 0x106 <main+0x20>
            case 2:
                *portd &= 0x00;
 180:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <portd>
 184:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <portd+0x1>
 188:	10 82       	st	Z, r1
                *portd |= TWO;
 18a:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <portd>
 18e:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <portd+0x1>
 192:	80 81       	ld	r24, Z
 194:	86 6b       	ori	r24, 0xB6	; 182
 196:	80 83       	st	Z, r24
                break;
 198:	b6 cf       	rjmp	.-148    	; 0x106 <main+0x20>
            case 3:
                *portd &= 0x00;
 19a:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <portd>
 19e:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <portd+0x1>
 1a2:	10 82       	st	Z, r1
                *portd |= THREE;
 1a4:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <portd>
 1a8:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <portd+0x1>
 1ac:	80 81       	ld	r24, Z
 1ae:	8e 69       	ori	r24, 0x9E	; 158
 1b0:	80 83       	st	Z, r24
                break;
 1b2:	a9 cf       	rjmp	.-174    	; 0x106 <main+0x20>
            case 4:
                *portd &= 0x00;
 1b4:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <portd>
 1b8:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <portd+0x1>
 1bc:	10 82       	st	Z, r1
                *portd |= FOUR;
 1be:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <portd>
 1c2:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <portd+0x1>
 1c6:	80 81       	ld	r24, Z
 1c8:	8c 6c       	ori	r24, 0xCC	; 204
 1ca:	80 83       	st	Z, r24
                break;
 1cc:	9c cf       	rjmp	.-200    	; 0x106 <main+0x20>
            case 5:
                *portd &= 0x00;
 1ce:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <portd>
 1d2:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <portd+0x1>
 1d6:	10 82       	st	Z, r1
                *portd |= FIVE;
 1d8:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <portd>
 1dc:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <portd+0x1>
 1e0:	80 81       	ld	r24, Z
 1e2:	8a 6d       	ori	r24, 0xDA	; 218
 1e4:	80 83       	st	Z, r24
                break;
 1e6:	8f cf       	rjmp	.-226    	; 0x106 <main+0x20>
            case 6:
                *portd &= 0x00;
 1e8:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <portd>
 1ec:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <portd+0x1>
 1f0:	10 82       	st	Z, r1
                *portd |= SIX;
 1f2:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <portd>
 1f6:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <portd+0x1>
 1fa:	80 81       	ld	r24, Z
 1fc:	8a 6f       	ori	r24, 0xFA	; 250
 1fe:	80 83       	st	Z, r24
                break;
 200:	82 cf       	rjmp	.-252    	; 0x106 <main+0x20>
            case 7:
                *portd &= 0x00;
 202:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <portd>
 206:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <portd+0x1>
 20a:	10 82       	st	Z, r1
                *portd |= SEVEN;
 20c:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <portd>
 210:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <portd+0x1>
 214:	80 81       	ld	r24, Z
 216:	8e 60       	ori	r24, 0x0E	; 14
 218:	80 83       	st	Z, r24
                break;
 21a:	75 cf       	rjmp	.-278    	; 0x106 <main+0x20>
            case 8:
                *portd &= 0x00;
 21c:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <portd>
 220:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <portd+0x1>
 224:	10 82       	st	Z, r1
                *portd |= EIGHT;
 226:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <portd>
 22a:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <portd+0x1>
 22e:	80 81       	ld	r24, Z
 230:	8e 6f       	ori	r24, 0xFE	; 254
 232:	80 83       	st	Z, r24
                break;
 234:	68 cf       	rjmp	.-304    	; 0x106 <main+0x20>
            case 9:
                *portd &= 0x00;
 236:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <portd>
 23a:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <portd+0x1>
 23e:	10 82       	st	Z, r1
                *portd |= NINE;
 240:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <portd>
 244:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <portd+0x1>
 248:	80 81       	ld	r24, Z
 24a:	8e 6d       	ori	r24, 0xDE	; 222
 24c:	80 83       	st	Z, r24
                break;
 24e:	5b cf       	rjmp	.-330    	; 0x106 <main+0x20>

00000250 <__divmodhi4>:
 250:	97 fb       	bst	r25, 7
 252:	07 2e       	mov	r0, r23
 254:	16 f4       	brtc	.+4      	; 0x25a <__divmodhi4+0xa>
 256:	00 94       	com	r0
 258:	07 d0       	rcall	.+14     	; 0x268 <__divmodhi4_neg1>
 25a:	77 fd       	sbrc	r23, 7
 25c:	09 d0       	rcall	.+18     	; 0x270 <__divmodhi4_neg2>
 25e:	0e 94 42 01 	call	0x284	; 0x284 <__udivmodhi4>
 262:	07 fc       	sbrc	r0, 7
 264:	05 d0       	rcall	.+10     	; 0x270 <__divmodhi4_neg2>
 266:	3e f4       	brtc	.+14     	; 0x276 <__divmodhi4_exit>

00000268 <__divmodhi4_neg1>:
 268:	90 95       	com	r25
 26a:	81 95       	neg	r24
 26c:	9f 4f       	sbci	r25, 0xFF	; 255
 26e:	08 95       	ret

00000270 <__divmodhi4_neg2>:
 270:	70 95       	com	r23
 272:	61 95       	neg	r22
 274:	7f 4f       	sbci	r23, 0xFF	; 255

00000276 <__divmodhi4_exit>:
 276:	08 95       	ret

00000278 <__tablejump2__>:
 278:	ee 0f       	add	r30, r30
 27a:	ff 1f       	adc	r31, r31
 27c:	05 90       	lpm	r0, Z+
 27e:	f4 91       	lpm	r31, Z
 280:	e0 2d       	mov	r30, r0
 282:	09 94       	ijmp

00000284 <__udivmodhi4>:
 284:	aa 1b       	sub	r26, r26
 286:	bb 1b       	sub	r27, r27
 288:	51 e1       	ldi	r21, 0x11	; 17
 28a:	07 c0       	rjmp	.+14     	; 0x29a <__udivmodhi4_ep>

0000028c <__udivmodhi4_loop>:
 28c:	aa 1f       	adc	r26, r26
 28e:	bb 1f       	adc	r27, r27
 290:	a6 17       	cp	r26, r22
 292:	b7 07       	cpc	r27, r23
 294:	10 f0       	brcs	.+4      	; 0x29a <__udivmodhi4_ep>
 296:	a6 1b       	sub	r26, r22
 298:	b7 0b       	sbc	r27, r23

0000029a <__udivmodhi4_ep>:
 29a:	88 1f       	adc	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	5a 95       	dec	r21
 2a0:	a9 f7       	brne	.-22     	; 0x28c <__udivmodhi4_loop>
 2a2:	80 95       	com	r24
 2a4:	90 95       	com	r25
 2a6:	bc 01       	movw	r22, r24
 2a8:	cd 01       	movw	r24, r26
 2aa:	08 95       	ret

000002ac <_exit>:
 2ac:	f8 94       	cli

000002ae <__stop_program>:
 2ae:	ff cf       	rjmp	.-2      	; 0x2ae <__stop_program>
